// This is an autogenerated file from Firebase Studio.
'use server';

/**
 * @fileOverview This file contains the Genkit flow for suggesting optimal visual representations of algorithms.
 *
 * - suggestVisualization - A function that suggests the best way to visualize a given algorithm.
 * - SuggestVisualizationInput - The input type for the suggestVisualization function.
 * - SuggestVisualizationOutput - The return type for the suggestVisualization function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const SuggestVisualizationInputSchema = z.object({
  algorithmType: z
    .string()
    .describe('The type of algorithm to visualize, e.g., sorting, pathfinding, searching.'),
  algorithmDescription: z
    .string()
    .describe('A detailed description of the algorithm, including its steps and logic.'),
  targetAudience: z
    .string()
    .describe('The target audience for the visualization, e.g., CS students, beginners.'),
});

export type SuggestVisualizationInput = z.infer<typeof SuggestVisualizationInputSchema>;

const SuggestVisualizationOutputSchema = z.object({
  visualizationSuggestion: z
    .string()
    .describe(
      'A detailed suggestion for the optimal visual representation of the algorithm, including specific visual elements, animations, and layout ideas.'
    ),
  reasoning: z
    .string()
    .describe('Explanation of why the suggested visualization is optimal for the given algorithm and target audience.'),
});

export type SuggestVisualizationOutput = z.infer<typeof SuggestVisualizationOutputSchema>;

export async function suggestVisualization(
  input: SuggestVisualizationInput
): Promise<SuggestVisualizationOutput> {
  return suggestVisualizationFlow(input);
}

const prompt = ai.definePrompt({
  name: 'suggestVisualizationPrompt',
  input: {schema: SuggestVisualizationInputSchema},
  output: {schema: SuggestVisualizationOutputSchema},
  prompt: `You are an expert in algorithm visualization. Your goal is to suggest the most effective and intuitive visual representation for a given algorithm, considering its type, description, and the target audience.

Algorithm Type: {{{algorithmType}}}
Algorithm Description: {{{algorithmDescription}}}
Target Audience: {{{targetAudience}}}

Based on the above information, provide a detailed suggestion for visualizing the algorithm, including specific visual elements, animations, and layout ideas. Also, explain why your suggested visualization is optimal for the given algorithm and target audience.

Output:
Visualization Suggestion:  [Detailed Visualization Suggestion]
Reasoning: [Explanation of why the suggestion is optimal]`,
});

const suggestVisualizationFlow = ai.defineFlow(
  {
    name: 'suggestVisualizationFlow',
    inputSchema: SuggestVisualizationInputSchema,
    outputSchema: SuggestVisualizationOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
